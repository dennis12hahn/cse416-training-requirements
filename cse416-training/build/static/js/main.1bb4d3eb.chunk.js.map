{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firestore","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","defaultColumn","Cell","initialValue","value","index","row","id","column","updateMyData","React","useState","setValue","useEffect","onChange","e","target","onBlur","Table","columns","data","skipPageReset","useTable","autoResetPage","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","class","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","App","collection","onSnapshot","snapshot","setData","docs","doc","useMemo","Header","accessor","str","tableProps","onClick","dataCopy","user_ref","where","limit","batch","get","then","forEach","delete","ref","splice","commit","new_user","gender","first_name","last_name","email","orderBy","push","add","style","margin","width","padding","marginLeft","length","rowIndex","columnId","old","user","console","log","update","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bb4d3eb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useTable } from \"react-table\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAs4XIS-dzpP36B95QQa4z0bk_PR8S53lk\",\n  authDomain: \"cse416-training.firebaseapp.com\",\n  projectId: \"cse416-training\",\n  storageBucket: \"cse416-training.appspot.com\",\n  messagingSenderId: \"838408399543\",\n  appId: \"1:838408399543:web:6c11f4dc6956fed2757b32\",\n  measurementId: \"G-E7F66BCT9L\",\n};\n\nconst app = firebase.initializeApp(firebaseConfig);\nconst firestore = firebase.firestore();\n\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateMyData,\n}) => {\n  const [value, setValue] = React.useState(initialValue);\n\n  const onChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const onBlur = () => {\n    updateMyData(index, id, value);\n  };\n\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  return <input value={value} onChange={onChange} onBlur={onBlur} />;\n};\n\nconst defaultColumn = {\n  Cell: EditableCell,\n};\n\nfunction Table({ columns, data, updateMyData, skipPageReset }) {\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data,\n      defaultColumn,\n      autoResetPage: !skipPageReset,\n      updateMyData,\n    });\n\n  return (\n    <table\n      class=\"table table-striped table-hover table-sm border table-responsive-sm mx-auto my-5 w-50\"\n      {...getTableProps()}\n    >\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nfunction App() {\n  // const [data, setData] = React.useState(() => require(\"./MOCK_DATA.json\"), []);\n\n  useState(() => {\n    firestore.collection(\"users\").onSnapshot((snapshot) => {\n      setData(snapshot.docs.map((doc) => doc.data()));\n    });\n  }, []);\n\n  const [data, setData] = React.useState([]);\n\n  const columns = React.useMemo(\n    () => [\n      { Header: \"ID\", accessor: \"id\" },\n      {\n        Header: \"First Name\",\n        accessor: \"first_name\",\n      },\n      {\n        Header: \"Last Name\",\n        accessor: \"last_name\",\n      },\n      {\n        Header: \"Email\",\n        accessor: \"email\",\n      },\n      {\n        Header: \"Gender\",\n        accessor: \"gender\",\n      },\n      {\n        Header: \"Delete\",\n        id: \"delete\",\n        accessor: (str) => \"delete\",\n        Cell: (tableProps) => (\n          <button\n            class=\"btn btn-danger btn-sm\"\n            onClick={() => {\n              const dataCopy = [...data];\n              const user_ref = firestore\n                .collection(\"users\")\n                .where(\"id\", \"==\", dataCopy[tableProps.row.index].id)\n                .limit(1);\n\n              let batch = firestore.batch();\n\n              user_ref.get().then((snapshot) => {\n                snapshot.docs.forEach((doc) => {\n                  batch.delete(doc.ref);\n                  dataCopy.splice(tableProps.row.index, 1);\n                  setData(dataCopy);\n                });\n                return batch.commit();\n              });\n            }}\n          >\n            x\n          </button>\n        ),\n      },\n      {\n        Header: \"Insert\",\n        id: \"insert\",\n        accessor: (str) => \"insert\",\n        Cell: (tableProps) => (\n          <button\n            class=\"btn btn-success btn-sm\"\n            onClick={() => {\n              const dataCopy = [...data];\n\n              const new_user = {\n                gender: \"\",\n                first_name: \"\",\n                last_name: \"\",\n                email: \"\",\n                id: \"\",\n              };\n\n              const query = firestore\n                .collection(\"users\")\n                .orderBy(\"id\", \"desc\")\n                .limit(1);\n\n              query.get().then((snapshot) => {\n                snapshot.docs.forEach((doc) => {\n                  new_user.id = doc.get(\"id\") + 1;\n                  dataCopy.push(new_user);\n                  setData(dataCopy);\n                  firestore.collection(\"users\").add(new_user);\n                });\n              });\n            }}\n          >\n            +\n          </button>\n        ),\n      },\n    ],\n    [data]\n  );\n\n  const updateMyData = (rowIndex, columnId, value) => {\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          try {\n            return {\n              ...old[rowIndex],\n              [columnId]: value,\n            };\n          } finally {\n            const user_ref = firestore\n              .collection(\"users\")\n              .where(\"id\", \"==\", old[index].id)\n              .limit(1);\n\n            let batch = firestore.batch();\n            const user = old[index];\n            console.log(user);\n\n            user_ref.get().then((snapshot) => {\n              snapshot.docs.forEach((doc) => {\n                batch.update(doc.ref, user);\n              });\n              return batch.commit();\n            });\n          }\n        }\n        return row;\n      })\n    );\n  };\n\n  return (\n    <div>\n      <div\n        style={{\n          margin: \"auto\",\n          width: \"50%\",\n          padding: \"10px\",\n        }}\n      >\n        <button\n          class=\"btn btn-primary btn-success\"\n          style={{ marginLeft: \"50%\" }}\n          onClick={() => {\n            const dataCopy = [...data];\n\n            const new_user = {\n              gender: \"\",\n              first_name: \"\",\n              last_name: \"\",\n              email: \"\",\n              id: \"\",\n            };\n\n            var no_users = false;\n\n            if (dataCopy.length === 0) {\n              no_users = true;\n              new_user.id = 1;\n              dataCopy.push(new_user);\n              setData(dataCopy);\n              firestore.collection(\"users\").add(new_user);\n            } else {\n              const query = firestore\n                .collection(\"users\")\n                .orderBy(\"id\", \"desc\")\n                .limit(1);\n\n              query.get().then((snapshot) => {\n                snapshot.docs.forEach((doc) => {\n                  new_user.id = doc.get(\"id\") + 1;\n                  dataCopy.push(new_user);\n                  setData(dataCopy);\n                  firestore.collection(\"users\").add(new_user);\n                });\n              });\n            }\n          }}\n        >\n          Add New\n        </button>\n      </div>\n      <Table columns={columns} data={data} updateMyData={updateMyData} />;\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}